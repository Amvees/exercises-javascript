---

name: Data Types
theory: |

  What happens if we try to multiply a number by a string? JavaScript will return `NaN` (not a number), the same value. This happens whenever incompatible values are used together. In this case, a number and a string:

  ```javascript
  3 * 'Dracarys'; // NaN
  ```

  Within high-level programming languages, data is categorized by type. A string refers to the String type, while numbers refer to Number and BigInt (very large numbers). Why do we need types? To protect your program from hard-to-find errors. Types define two things:

  * Possible values.  For example, numbers in JavaScript are divided into two types: Number and BigInt. The first ones are all numbers below a certain threshold (you can check it out), the second ones are all numbers above it. This division is made due to the technical features of the hardware.
  * A set of operations that can be executed upon this type.  For example, the operation of multiplication works for the type "integers". But it makes no sense for the type "strings": multiplying the word "mother" by the word "notepad" makes no sense.

  JavaScript acts in two ways when it executes operations with violations. In some situations, it flags that the operation is invalid and terminates with an error. In others, the program continues to work. In the second case, the invalid operation returns something like `NaN`, as in the example above.

  How does JavaScript detect the data type? Pretty simple. Any value is initialized and, depending on how it's initialized, it becomes clear what's type of data is it. For example, numbers are just numbers without any extra characters, apart from the point for rational numbers. Strings, on the other hand, are always written between special characters (there are three ways to write strings in JavaScript). For example, `'234'` is a string, even though there are numbers written between quotes.

  You can find out the type of the data using `typeof` operator:

  ```javascript
  typeof 3; // 'number'
  typeof 'Game'; // 'string'
  ```

  The Number, BigInt, and String data types are *primitive* types, because they consist of a single value of that type. But this is not always the case. JavaScript has a built-in composite type Object ( as well as arrays, dates and others based on it). It can be used to combine data of different types into a single value, e.g. we can create a user by adding his name and age.

  ```javascript
  // Learnt this syntax in Hexlet
  const user = { name: 'Toto', age: 33 };
  ```

  Note: there are two lines, but only one string in the code above.

instructions: |
  Print the number `-0.304`.

tips:
  - |
    [Literal](https://en.wikipedia.org/wiki/Literal_(computer_programming))

definitions:
  - name: "Data type"
    description: "s a type of information in code. For example, integers, rational numbers, and strings are different data types. Data type determines what can be done with the elements of a particular data."
  - name: "Primitive data types"
    description: "are simple types built into the programming language."
  - name: "A string"
    description: |
      is a data type that describes a set of characters (text); for example, `'text'` or `"text"`..
