---

name: Encoding
theory: |

  On the machine level, the computer operates only with numbers `0` and `1`. This is so called [binary code](https://en.wikipedia.org/wiki/Binary_code), ones and zeros are called bits, from "binary digit".

  Numbers we usually use in the decimal number system are encoded using binary numbers:

  - 0 ← 0
  - 1 ← 1
  - 2 ← 10
  - 3 ← 11
  - 4 ← 100
  - 5 ← 101

  But how to deal with text? The computer isn't aware of letters, punctuation and other text characters. All these characters are encoded by numbers too.

  We can take the English alphabet and give each letter a number, starting with one:

  - a ← 1
  - b ← 2
  - c ← 3
  - d ← 4
  - ...
  - z ← 26

  Then you can teach the computer to understand this table and to translate text into numbers and vice versa:

  - `hello` → `8` `5` `12` `12` `15`
  - `7` `15` `15` `4` → `good`

  Such tables that match letters and numbers are called encodings. Besides letters of the alphabet, encoding tables include punctuation marks and other useful characters. You've probably come across such encodings as [ASCII](https://en.wikipedia.org/wiki/ASCII) or [UTF-8](https://en.wikipedia.org/wiki/UTF-8).

  Different encodings have different numbers of characters. At first, small tables like ASCII were enough for programmers. But there were Latin letters only, a few simple characters like `%` and `?`, and special control characters like newline.

  With the development of computers, different countries needed their own comprehensive tables. Including Cyrillic letters, hieroglyphs, Arabic script, additional mathematical and typographic characters, and later even emoji.

  One of [the Unicode standarts](https://en.wikipedia.org/wiki/Unicode) — *utf-8*. is used in most cases today. It includes the characters of almost all the written languages of the world. Therefore a letter composed by a person in China in Chinese someone can easily open and view it natively on a computer in Finland (whether he would understand it or not is another question).

  Programmers have to deal with encodings regularly. Unicode support in different programming languages is carried out on a different level. Besides, encodings must be declared when working with databases and with files.

instructions: |

  In JavaScript you can "query" and print any ASCII character. For example:

  ```javascript
  console.log(String.fromCharCode(63));
  ```

  Character 63 will be printed - a question mark. You can print any character this way.

  Find the ASCII table on the internet. You can use queries like "ascii codes table" or "ascii codes". Generally such tables give codes in several number systems: decimal, binary, octal and hexadecimal. We are interested in the decimal code (*dec* or *decimal*).

  Using the example above and the table you found, print the characters `~`, `^` and `%` (each on its own line).

  (Of course, you could cheat and just do something like `console.log('~')`, but that would be no fun at all :)

# tips: [Что такое кодировки?](https://guides.hexlet.io/encoding/)

definitions:
  - name: Encoding
    description: "is a set of characters encoded using numbers to represent text digitally."
