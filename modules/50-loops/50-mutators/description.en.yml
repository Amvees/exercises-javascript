---

name: Increment and decrement
theory: |

  JavaScript has adopted two operators from the C language: **increment** `++` and **decrement** `--`, which are commonly used with loops. These unary operators add or subtract a one from a number in a variable:

  ```javascript
  let i = 0;
  i++; // 0
  i++; // 1

  i--; // 2
  i--; // 1
  ```

  They can be used prefix along with postfix:

  ```javascript
  let i = 0;
  ++i; // 1
  ++i; // 2

  --i; // 1
  --i; // 0
  ```

  It seems to be no difference between the postfix and prefix usages. And that's where it gets complicated.

  Unlike other operators, which have no side-effects and simply return a new value, increment and decrement not only return a value but also **change** it.

  If used prefix, the variable changes first and then returns.

  If used postfix, it's the opposite: the variable returns first and then changes its value.

  The rule works equally for increment and decrement. For simplicity, let's consider only increments:

  ```javascript
  let x = 5;

  console.log(++x); // => 6
  console.log(x);   // => 6

  console.log(x++); // => 6
  console.log(x);   // => 7
  ```

  What's going on?

  1. Printed `++x`. It's a prefix increment, so intially the value increased by 1, then the result was returned and printed.
  2. Since the value changed, `console.log(x)` printed 6.
  3. Now print `x++`. It's a postfix increment, so it returns the value before it increments by 1.
  4. Since the value has changed, `console.log(x)` output 7.

  ---

  It gets worse when increments are put into other operations: `x = i++ - 7 + --h`. It's almost impossible to understand such code and its writing should be considered a serious crime.

  For example, the linter (the program that checks the code) in JavaScript immediately starts to complain when it sees increment or decrement.

  Usage guidelines:

  * Never mix operations/functions without side effects with operations/functions with side effects within a single expression.
  * Use increment and decrement only if there is no difference between prefix and postfix version: apart from other expressions, on a separate line of code.


instructions: |

  Write the `makeItFunny()` function returning a copy of a given string, where each nth element is uppercase. n is also passed to the function.

  To find each nth element, you will need the remainder of division `%`. Think about how you can use it.

  ```javascript
  const text = 'I never look back';
  // Every 3rd element
  makeItFunny(text, 3); // 'I NevEr LooK bAck'
  ```

tips:
  - |
    [Remainder operator (%)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder)
